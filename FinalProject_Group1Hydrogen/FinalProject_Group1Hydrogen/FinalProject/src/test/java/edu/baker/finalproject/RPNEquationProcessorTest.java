package edu.baker.finalproject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import static java.util.stream.Collectors.toList;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

/**
 * Integration tests for RPN Calculator and RPNEquationProcessor
 * @author Richard Lesh
 */
public class RPNEquationProcessorTest {
    
    public RPNEquationProcessorTest() {
    }
    /**
     * Test of processInput method, of class RPNEquationProcessor.
     * Will process all files in "test_cases" directory ending with ".rpn"
     * Computations in files must end up being 0.0 within 1e-9
     * @throws java.io.IOException
     */
    @Test
    public void testProcessInput() throws IOException {
        Path path = FileSystems.getDefault().getPath("test_cases");
        for (var p : Files.list(path).collect(toList())) {
            if (p.toString().endsWith(".rpn") && !p.endsWith("error_cases.rpn")) {
                System.out.println("Executing: " + p.toString());
                BigDecimal result = BigDecimal.ONE.negate();
                try (BufferedReader reader = Files.newBufferedReader(p, StandardCharsets.UTF_8)) {
                    RPNEquationProcessor p1 = new RPNEquationProcessor(reader, new MathContext(10, RoundingMode.UNNECESSARY));
                    OutputStreamWriter nullDevice = new OutputStreamWriter(OutputStream.nullOutputStream());
// Output to System.out if needed for debugging.
//                    OutputStreamWriter nullDevice = new OutputStreamWriter(System.out);
                    result = p1.processInput(nullDevice);
                    assertEquals(0., result.doubleValue(), 1e-9);
                } catch (IOException ex) {
                    fail("Can't open file " + p.toAbsolutePath());
                }
            }
        }
    }

    /**
     * Tests for error messages generated by class RPNEquationProcessor
     * @throws IOException 
     */
    @Test
    public void testProcessBadInput() throws IOException {
        Path path = FileSystems.getDefault().getPath("test_cases", "error_cases.rpn");
        System.out.println("Executing with capture: " + path.toString());
        StringWriter buffer = new StringWriter();
        try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
            RPNEquationProcessor p1 = new RPNEquationProcessor(reader, MathContext.UNLIMITED);
            BigDecimal result = p1.processInput(buffer);
        } catch (IOException ex) {
            fail("Can't open file " + path.toAbsolutePath());
        }
        String s = buffer.toString();
        assertTrue(s.contains("Stack empty!"));
        assertTrue(s.contains("Can't redefine Ï€"));
        assertTrue(s.contains("Can't redefine pi"));
        assertTrue(s.contains("Can't redefine e"));
        assertTrue(s.contains("Can't redefine x"));
        assertTrue(s.contains("Can't redefine y"));
        assertTrue(s.contains("Illegal variable: bad_wolf"));
        assertTrue(s.contains("Illegal assignment: bad_wolf=dr. who?"));
        assertTrue(s.contains("ipow(0,0) is indeterminate!"));
        assertTrue(s.contains("-Infinity"));
        assertTrue(s.contains("Infinity"));
    }
}
